// Prisma schema for Emerging Leaders App
// Includes user registration, OTP, project goals, and budgeting features

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id @default(uuid())
  email                   String        @unique
  password                String
  name                    String?
  profileComplete         Boolean       @default(false)
  refreshToken            String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  firstname               String?
  lastname                String?
  maritalStatus           String?
  gender                  String?
  age                     Int?
  phone                   String?
  dateOfBirth             DateTime?
  hasDisability           Boolean?
  disabilityType          String?
  city                    String?
  followUpPreference      String?       // email, calls, calls & email
  highestEducationLevel   String?
  sourceOfIncome          String?
  currentMonthlyIncome    Float?
  doYouSaveRegularly      Boolean?
  savingFrequency         String?       // irregularly, daily, weekly, monthly
  savingAmount            Float?
  lifeControlRating       String?
  lifeSatisfactionRating  String?
  happinessRating         String?
  senseOfPurpose          String?
  lackOfIncomeSource      Boolean?
  addiction               Boolean?
  underageParent          Boolean?
  lonelinessOrIsolation   Boolean?
  otherChallenges         String?

  // Relations
  otp                     Otp[]
  savingsGoals            SavingsGoal[]
  budgets                 Budget[]
  expenses                Expense[]
  incomes                 Income[]
}

model Otp {
  id         String   @id @default(uuid())
  otp        String
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Category {
  id            String     @id @default(uuid())
  icon          String?
  title         String
  description   String
  usageContext  String?    // e.g. 'finance', 'project', or 'both'

  // Relations
  projects      Project[]
  budgets       Budget[]
  expenses      Expense[]
  incomes       Income[]

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Project {
  id          String     @id @default(uuid())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id])
  goals       Goal[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Goal {
  id         String     @id @default(uuid())
  title      String
  repeat     String?
  date       DateTime
  time       String?
  projectId  String
  project    Project    @relation(fields: [projectId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model SavingsGoal {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  currency        String
  amount          Float
  hasSpecificGoal Boolean
  goalTitle       String?
  targetAmount    Float?
  targetDate      DateTime?
  goalIcon        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Budget {
  id         String     @id @default(uuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  limit      Float
  categoryId String
  category   Category   @relation(fields: [categoryId], references: [id])
  repeat     String     // one-off, daily, weekly, monthly
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Expense {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  amount      Float
  description String
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id])
  createdAt   DateTime   @default(now())
}

model Income {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  amount      Float
  description String
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id])
  createdAt   DateTime   @default(now())
}
