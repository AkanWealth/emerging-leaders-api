// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

model User {
  id                   String   @id @default(uuid())
  email                String   @unique
  name                 String?
  profileComplete      Boolean  @default(false)
  refreshToken         String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  firstname            String?
  lastname             String?
  maritalStatus        String?
  gender               String?
  age                  Int?
  phone                String?
  dateOfBirth          DateTime?
  hasDisability        Boolean? 
  disabilityType       String?
  city                 String?
  followUpPreference   String? // email, calls, calls & email
  highestEducationLevel String?
  sourceOfIncome       String?
  currentMonthlyIncome Float?
  doYouSaveRegularly   Boolean?
  savingFrequency      String? // irregularly, daily, weekly, monthly
  savingAmount         Float?
  lifeControlRating    String?
  lifeSatisfactionRating String?
  happinessRating      String?
  senseOfPurpose       String?
  lackOfIncomeSource   Boolean?
  addiction            Boolean?
  underageParent       Boolean?
  lonelinessOrIsolation Boolean?
  otherChallenges      String?
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  goals       Goal[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  icon        String
  title       String
  description String
  projects    Project[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Goal {
  id        String   @id @default(uuid())
  title     String
  repeat    String?
  date      DateTime
  time      String?
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

