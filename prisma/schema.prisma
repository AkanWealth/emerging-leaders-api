generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id @default(uuid())
  email                   String        @unique
  password                String
  name                    String?
  profileComplete         Boolean       @default(false)
  refreshToken            String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  isAdmin                 Boolean       @default(false) 

  // Personal Info
  firstname               String?
  lastname                String?
  maritalStatus           String?
  gender                  String?
  age                     Int?
  ageGroup                String?
  phone                   String?
  dateOfBirth             DateTime?
  hasDisability           Boolean?
  disabilityType          String?
  city                    String?
  followUpPreference      String?
  highestEducationLevel   String?
  sourceOfIncome          String?
  currentMonthlyIncome    Float?
  doYouSaveRegularly      Boolean?
  savingFrequency         String?
  savingAmount            Float?
  lifeControlRating       String?
  lifeSatisfactionRating  String?
  happinessRating         String?
  senseOfPurpose          String?
  lackOfIncomeSource      Boolean?
  addiction               Boolean?
  underageParent          Boolean?
  lonelinessOrIsolation   Boolean?
  otherChallenges         String?

  // Relations
  otp                     Otp[]
  savingsGoals            SavingsGoal[]
  budgets                 Budget[]
  expenses                Expense[]
  incomes                 Income[]
  contents                Content[] 
  tickets                 Ticket[]
  wallet                  Wallet?        // no @relation here
}

model Wallet {
  id         String   @id @default(uuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  balance    Float    @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model Otp {
  id         String   @id @default(uuid())
  otp        String
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Category {
  id            String     @id @default(uuid())
  icon          String?
  title         String
  description   String
  usageContext  String?

  // Relations
  projects      Project[]
  budgets       Budget[]
  expenses      Expense[]
  incomes       Income[]
  contents  Content[] 

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Content {
  id         String     @id @default(uuid())
  title      String
  fileLinks  String[]
  status     Status     @default(DRAFT)
  categoryId String
  authorId   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  author     User       @relation(fields: [authorId], references: [id])
  category   Category   @relation(fields: [categoryId], references: [id])
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Project {
  id          String     @id @default(uuid())
  name        String
  description String
  projectColor String     // Hex or tailwind or frontend-usable string
  startDate   DateTime
  endDate     DateTime
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id])
  goals       Goal[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Goal {
  id               String     @id @default(uuid())
  title            String
  repeat           String?
  isCompleted      Boolean    @default(false)
  startDate        DateTime
  endDate          DateTime
  startTime        String?
  endTime          String?
  icon             String?    // New optional icon field
  projectId        String
  project          Project    @relation(fields: [projectId], references: [id])
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}


model SavingsGoal {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  currency        String
  monthlyIncome   Float     // was previously named `amount`
  hasSpecificGoal Boolean
  goalTitle       String?
  targetAmount    Float     // this is the amount to deduct from wallet
  targetDate      DateTime?
  goalIcon        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}


model Budget {
  id         String     @id @default(uuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  limit      Float
  categoryId String
  category   Category   @relation(fields: [categoryId], references: [id])
  repeat     String
  expenses   Expense[]  // Link expenses made under this budget
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Expense {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  amount      Float
  description String
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id])
  budgetId    String?    // optional link to a budget
  budget      Budget?    @relation(fields: [budgetId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Income {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  amount      Float
  description String
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Ticket {
  id          String      @id @default(uuid())
  userId      String
  subject     String
  name        String
  description String
  status      TicketStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user        User         @relation(fields: [userId], references: [id])
}

enum TicketStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}