generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id                     String            @id @default(uuid())
  email                  String            @unique
  name                   String?
  refreshToken           String?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  profileComplete        Boolean           @default(false)
  addiction              Boolean?
  age                    Int?
  city                   String?
  currentMonthlyIncome   Float?
  dateOfBirth            DateTime?
  disabilityType         String?
  doYouSaveRegularly     Boolean?
  firstname              String?
  followUpPreference     String?
  gender                 String?
  happinessRating        String?
  hasDisability          Boolean?
  highestEducationLevel  String?
  lackOfIncomeSource     Boolean?
  lastname               String?
  lifeControlRating      String?
  lifeSatisfactionRating String?
  lonelinessOrIsolation  Boolean?
  maritalStatus          String?
  otherChallenges        String?
  phone                  String?
  savingAmount           Float?
  savingFrequency        String?
  senseOfPurpose         String?
  sourceOfIncome         String?
  underageParent         Boolean?
  password               String
  ageGroup               String?
  isAdmin                Boolean           @default(false)
  currencyId             String?
  profilePicture         String?
  activityLogs           ActivityLog[]
  budgets                Budget[]
  contents               Content[]
  expenses               Expense[]
  FcmToken               FcmToken[]
  incomes                Income[]
  Note                   Note[]
  otp                    Otp[]
  projects               Project[]
  RecurringIncome        RecurringIncome[]
  savingsGoals           SavingsGoal[]
  SavingsTopUp           SavingsTopUp[]
  module1s               Module1[]
  module2s               Module2[]
  module3s               Module3[]
  tickets                Ticket[]
  currency               Currency?         @relation(fields: [currencyId], references: [id])
  UserAssessment         UserAssessment[]
   financeSetups FinanceSetup[]
  wallet                 Wallet?
  Category               Category[]
}

model FcmToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  platform  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Wallet {
  id              String            @id @default(uuid())
  userId          String            @unique
  balance         Float             @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  RecurringIncome RecurringIncome[]
  user            User              @relation(fields: [userId], references: [id])
}

model Otp {
  id        String   @id @default(uuid())
  otp       String
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Category {
  id           String    @id @default(uuid())
  icon         String?
  title        String
  description  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  usageContext String?
  budgets      Budget[]
  contents     Content[]
  expenses     Expense[]
  incomes      Income[]
  projects     Project[]

  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}

model Content {
  id         String   @id @default(uuid())
  title      String
  fileLinks  String[]
  status     Status   @default(DRAFT)
  categoryId String
  authorId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation(fields: [authorId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
}

model Project {
  id           String   @id @default(uuid())
  name         String
  description  String
  completed    Boolean  @default(false)
  startDate    DateTime
  endDate      DateTime
  categoryId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  projectColor String
  userId       String
  goals        Goal[]
  category     Category @relation(fields: [categoryId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}

model Goal {
  id          String   @id @default(uuid())
  title       String
  repeat      String?
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  endDate     DateTime
  endTime     String?
  isCompleted Boolean  @default(false)
  startDate   DateTime
  startTime   String?
  icon        String?
  project     Project  @relation(fields: [projectId], references: [id])
}

model SavingsGoal {
  id           String         @id @default(uuid())
  userId       String
  targetAmount Float
  targetDate   DateTime
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  icon         String?
  isCompleted  Boolean        @default(false)
  savedAmount  Float          @default(0)
  title        String?
  budgetId     String?
  Budget       Budget?        @relation(fields: [budgetId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
  SavingsTopUp SavingsTopUp[]
}

model Budget {
  id           String         @id @default(uuid())
  userId       String
  limit        Float
  categoryId   String
  repeat       String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  category     Category       @relation(fields: [categoryId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
  expenses     Expense[]
  SavingsGoal  SavingsGoal[]
  SavingsTopUp SavingsTopUp[]
}

model Expense {
  id          String   @id @default(uuid())
  userId      String
  amount      Float
  description String
  categoryId  String
  createdAt   DateTime @default(now())
  budgetId    String?
  updatedAt   DateTime @updatedAt
  budget      Budget?  @relation(fields: [budgetId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Income {
  id          String   @id @default(uuid())
  userId      String
  amount      Float
  description String
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    Category @relation(fields: [categoryId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Ticket {
  id          String       @id @default(uuid())
  userId      String
  subject     String
  name        String
  description String
  status      TicketStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
}

model ActivityLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  metadata  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Currency {
  id        String            @id @default(uuid())
  symbol    String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  code      String            @unique
  incomes   RecurringIncome[]
  financeSetups FinanceSetup[]
  users     User[]
}

model RecurringIncome {
  id          String               @id @default(uuid())
  userId      String
  walletId    String
  amount      Float
  frequency   Frequency
  description String?
  type        IncomeType
  currencyId  String
  startDate   DateTime
  isActive    Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  currency    Currency             @relation(fields: [currencyId], references: [id])
  user        User                 @relation(fields: [userId], references: [id])
  wallet      Wallet               @relation(fields: [walletId], references: [id])
  logs        RecurringIncomeLog[]
}

model RecurringIncomeLog {
  id                String          @id @default(uuid())
  recurringIncomeId String
  creditedAt        DateTime        @default(now())
  recurringIncome   RecurringIncome @relation(fields: [recurringIncomeId], references: [id])
}

model AssessmentCategory {
  id          String       @id @default(uuid())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  assessments Assessment[]
}

model Assessment {
  id             String               @id @default(uuid())
  title          String
  categoryId     String
  status         AssessmentStatus     @default(OPEN)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  scheduledFor   DateTime
  scheduledMonth String?
  category       AssessmentCategory   @relation(fields: [categoryId], references: [id])
  questions      AssessmentQuestion[]
  userResponses  UserAssessment[]
}

model AssessmentQuestion {
  id           String             @id @default(uuid())
  assessmentId String
  question     String
  type         QuestionType
  required     Boolean            @default(false)
  order        Int?
  options      AssessmentOption[]
  assessment   Assessment         @relation(fields: [assessmentId], references: [id])
}

model AssessmentOption {
  id         String             @id @default(uuid())
  questionId String
  value      String
  question   AssessmentQuestion @relation(fields: [questionId], references: [id])
}

model UserAssessment {
  id           String     @id @default(uuid())
  userId       String
  assessmentId String
  submittedAt  DateTime   @default(now())
  answers      Json
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Note {
  id        String   @id @default(uuid())
  userId    String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model SavingsTopUp {
  id            String      @id @default(uuid()) // ✅ generate automatically
  savingsGoalId String
  userId        String
  amount        Float
  createdAt     DateTime    @default(now())
  budgetId      String?
  Budget        Budget?     @relation(fields: [budgetId], references: [id])
  SavingsGoal   SavingsGoal @relation(fields: [savingsGoalId], references: [id])
  User          User        @relation(fields: [userId], references: [id])
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum TicketStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}

enum Frequency {
  DAILY
  MONTHLY
  YEARLY
}

enum IncomeType {
  SALARY
  GENERAL
}

enum QuestionType {
  RADIO
  CHECKBOX
  SHORT_TEXT
  LONG_TEXT
}

enum AssessmentStatus {
  OPEN
  LOCKED
}

model Module1 {
  id                            String   @id @default(uuid())
  userId                        String   @unique
  user                          User     @relation(fields: [userId], references: [id])

  mindset                       String
  areasGivenAwayPen             String
  whatWentWell                  String
  whatCouldBeBetter             String
  whatCouldYouDoForFree         String
  goodCharacteristicsToDevelop String
  dreams                        String
  characterGoals                String
  legacy                        String
  relationshipStoryChange       String
  howToGetThere                 String
  threeFocusPoints1             String
  whoDoYouKnow                  String
  whoDoYouNeedToKnow            String
  threeFocusPoints2             String
  leadershipStepToTake          String

  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
}


model Module2 {
  id         String @id @default(uuid())
  userId     String @unique
  user       User   @relation(fields: [userId], references: [id])

  goodFinancialManagement  String
  badFinancialManagement   String
  biggerYesShortTerm       String
  biggerYesMediumTerm      String
  biggerYesLongTerm        String
  leadershipMindsetInMoney String
  savingFor                String
  howMuchToSave            Float
  incomeAmount             Float
  expensesToCut            String
  savingsLocation          String
  trackSavings             String
  wantsVsNeeds             String

  income1     Float
  income2     Float
  income3     Float
  otherIncome Float
  food        Float
  house       Float
  travel      Float
  rent        Float
  mobile      Float
  medical     Float
  education   Float
  funFund     Float
  other1      Float
  other2      Float

  financeLeadershipStep String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Module3 {
  id                  String   @id @default(uuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id])

  projectPurpose      String
  skills              String
  experience          String
  resources           String
  people              String
  timeAvailability    String
  focusPoint1         String
  focusPoint2         String
  focusPoint3         String
  peopleIKnow         String
  peopleINeedToKnow   String
  what                String
  when                String
  who                 String
  leadYourProjectNote String
  additionalNotes     String

  oneYearFromNow      String

  week1Income         String
  week1Total          String
  week1Expenses       String
  week1ProfitLoss     String
  week1Cashflow       String

  week2Income         String
  week2Total          String
  week2Expenses       String
  week2ProfitLoss     String
  week2Cashflow       String

  week3Income         String
  week3Total          String
  week3Expenses       String
  week3ProfitLoss     String
  week3Cashflow       String

  week4Income         String
  week4Total          String
  week4Expenses       String
  week4ProfitLoss     String
  week4Cashflow       String

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}


model FinanceSetup {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])

  currencyId   String
  currency     Currency @relation(fields: [currencyId], references: [id])

  salaryAmount Float
  icon         String?
  title        String
  targetAmount Float
  targetDate   DateTime
  financeCompleted Boolean @default(false)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
